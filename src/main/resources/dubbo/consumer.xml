<?xml version="1.0" encoding="UTF-8"?>
<beans  xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
		xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
		xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd 
		http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd">

	<!-- 消费方应用名，用于计算依赖关系，不是匹配条件，不要与提供方一样 -->
	<dubbo:application name="consumer-of-helloworld-app" />
	
	<!-- 使用multicast广播注册中心暴露发现服务地址 -->
	<dubbo:registry address="zookeeper://localhost:2181" />
	
	<!-- 生成远程服务代理，可以和本地bean一样使用demoService -->
	<!-- <dubbo:reference id="demoService" interface="org.demo.dubbo.DemoService" /> -->
	
	
	
	<!-- 【※】更多配置 -->
	
	
	<!-- 【※】启动检查 -->
	<!-- 关闭所有服务的启动时检查 (没有提供者时报错)：默认 check="true" -->
	<!-- <dubbo:consumer check="false" /> -->


	<!--  
		【※】集群容错模式： -->
	<!-- <dubbo:reference cluster="failsafe" /> -->
	
	
	<!-- 
		【※】直连提供者：需要绕过注册中心，只测试指定服务提供者
		1、通过 XML 配置
		2、通过 -D 参数指定在 JVM 启动参数中加入-D参数映射服务地址 ，如：java -Dcom.alibaba.xxx.XxxService=dubbo://localhost:20890
		3、如果服务比较多，也可以用文件映射，用 -Ddubbo.resolve.file 指定映射文件路径，此配置优先级高于 <dubbo:reference> 中的配置 ，如：java -Ddubbo.resolve.file=dubbo-resolve.properties 
	-->
	<!-- <dubbo:reference id="...Service" interface="..." url="dubbo://localhost:20880; xxx.xxx.xxx.xxx:20880"/> -->
	
	
	<!-- 
		【※】多注册中心引用 -->
	<!-- <dubbo:reference id="chinaHelloService" interface="com.alibaba.hello.api.HelloService" version="1.0.0" registry="chinaRegistry" /> -->
	<!-- <dubbo:reference id="intlHelloService" interface="com.alibaba.hello.api.HelloService" version="1.0.0" registry="intlRegistry" /> -->
	
	
	<!-- 【※】多版本
		当一个接口实现，出现不兼容升级时，可以用版本号过渡，版本号不同的服务相互间不引用。 -->
	<!-- 新版本服务消费者配置： -->
	<!-- <dubbo:reference id="barService" interface="com.foo.BarService" version="2.0.0" /> -->
	
	
	<!-- 
		【※】分组聚合
		按组合并返回结果 ，比如菜单服务，接口一样，但有多种实现，用group区分，
		现在消费方需从每种group中调用一次返回结果，合并结果返回，这样就可以实现聚合菜单项。 -->
		
	<!-- 搜索所有分组 -->
	<!-- <dubbo:reference interface="com.xxx.MenuService" group="*" merger="true" /> -->
	
	<!-- 合并指定分组 -->
	<!-- <dubbo:reference interface="com.xxx.MenuService" group="aaa,bbb" merger="true" /> -->
	
	<!-- 指定方法合并结果，其它未指定的方法，将只调用一个 Group -->
	<!-- <dubbo:reference interface="com.xxx.MenuService" group="*">
			<dubbo:method name="getMenuItems" merger="true" />
		</dubbo:reference> -->
		
	<!-- 某个方法不合并结果，其它都合并结果 -->
	<!-- <dubbo:reference interface="com.xxx.MenuService" group="*" merger="true">
			<dubbo:method name="getMenuItems" merger="false" />
		</dubbo:reference> -->
		
	<!-- 指定合并策略，缺省根据返回值类型自动匹配，如果同一类型有两个合并器时，需指定合并器的名称 -->
	<!-- <dubbo:reference interface="com.xxx.MenuService" group="*">
			<dubbo:method name="getMenuItems" merger="mymerge" />
		</dubbo:reference> -->

	<!-- 指定合并方法，将调用返回结果的指定方法进行合并，合并方法的参数类型必须是返回结果类型本身 -->
	<!-- <dubbo:reference interface="com.xxx.MenuService" group="*">
			<dubbo:method name="getMenuItems" merger=".addAll" />
		</dubbo:reference> -->
		
		
	<!-- 【※】结果缓存
		结果缓存 ，用于加速热门数据的访问速度，Dubbo 提供声明式缓存，以减少用户加缓存的工作量 。
		缓存类型
		lru 		基于最近最少使用原则删除多余缓存，保持最热的数据被缓存。
		threadlocal 当前线程缓存，比如一个页面渲染，用到很多 portal，每个 portal 都要去查用户信息，通过线程缓存，可以减少这种多余访问。
		jcache 		与 JSR107 集成，可以桥接各种缓存实现。 -->
	<!-- <dubbo:reference interface="com.foo.BarService" cache="lru" /> -->
	
	<!-- <dubbo:reference interface="com.foo.BarService">
			<dubbo:method name="findBar" cache="lru" />
		</dubbo:reference> -->
		
	<!-- 【※】泛华调用
		使用泛化调用泛化接口调用方式主要用于客户端没有 API 接口及模型类元的情况，参数及返回值中的所有POJO 均用 Map 表示，
		通常用于框架集成，比如：实现一个通用的服务测试框架，可通过GenericService 调用所有服务实现。 -->
	<!-- <dubbo:reference id="demoService" interface="org.demo.dubbo.DemoService" generic="true"/> -->
		
	
	<!-- 【※】异步调用
		基于 NIO 的非阻塞实现并行调用，客户端不需要启动多线程即可完成并行调用多个远程服务，相对多线程开销较小。
	-->
	<!-- <dubbo:reference id="fooService" interface="com.alibaba.foo.FooService">
			<dubbo:method name="findFoo" async="true" />
		</dubbo:reference> -->


	<!-- 【※】是否等待消息发出：
		sent="true" 等待消息发出，消息发送失败将抛出异常。 
		sent="false" 不等待消息发出，将消息放入 IO 队列，即刻返回。-->
	<!-- <dubbo:method name="findFoo" async="true" sent="true" /> -->
	
	<!-- 如果你只是想异步，完全忽略返回值，可以配置 return="false" ，以减少 Future 对象的创建和管理成本 -->
	<!-- <dubbo:method name="findFoo" async="true" return="false" /> -->
	
	<!-- 【※】参数回调
		参数回调方式与调用本地 callback 或 listener 相同，只需要在 Spring 的配置文件中声明哪个参数是 callback 类型即可。
		Dubbo 将基于长连接生成反向代理，这样就可以从服务器端调用客户端逻辑 -->
	<!-- 注：参数回调不能绕过注册中心直连提供者，会报错 -->
	<dubbo:reference id="callbackService" interface="org.demo.dubbo.callback.CallbackService" />


	<!-- 【※】事件通知 
		在调用之前、调用之后、出现异常时，会触发 oninvoke 、 onreturn 、 onthrow 三个事件，
		可以配置当事件发生时，通知哪个类的哪个方法 。-->
	<bean id ="demoCallback" class = "org.demo.dubbo.callback.impl.NotifyImpl" />
	<dubbo:reference id="demoService" interface="org.demo.dubbo.DemoService" >
		<dubbo:method name="sayHello" async="false" onreturn = "demoCallback.onreturn" onthrow="demoCallback.onthrow" />
	</dubbo:reference>
	
</beans>